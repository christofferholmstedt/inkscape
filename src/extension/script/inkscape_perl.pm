# This file was automatically generated by SWIG
package inkscape_perl;
require Exporter;
@ISA = qw(Exporter);
package inkscape_perlc;
boot_inkscape_perl();
package inkscape_perl;
@EXPORT = qw( );

# ---------- BASE METHODS -------------

package inkscape_perl;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package inkscape_perl;

*getInkscape = *inkscape_perlc::getInkscape;

############# Class : inkscape_perl::Inkscape ##############

package inkscape_perl::Inkscape;
@ISA = qw( inkscape_perl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inkscape_perlc::delete_Inkscape($self);
        delete $OWNER{$self};
    }
}

*getDesktop = *inkscape_perlc::Inkscape_getDesktop;
*getDialogManager = *inkscape_perlc::Inkscape_getDialogManager;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inkscape_perl::DialogManager ##############

package inkscape_perl::DialogManager;
@ISA = qw( inkscape_perl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inkscape_perlc::delete_DialogManager($self);
        delete $OWNER{$self};
    }
}

*showAbout = *inkscape_perlc::DialogManager_showAbout;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inkscape_perl::Desktop ##############

package inkscape_perl::Desktop;
@ISA = qw( inkscape_perl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inkscape_perlc::delete_Desktop($self);
        delete $OWNER{$self};
    }
}

*getDocument = *inkscape_perlc::Desktop_getDocument;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inkscape_perl::Document ##############

package inkscape_perl::Document;
@ISA = qw( inkscape_perl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inkscape_perlc::delete_Document($self);
        delete $OWNER{$self};
    }
}

*hello = *inkscape_perlc::Document_hello;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package inkscape_perl;

1;
